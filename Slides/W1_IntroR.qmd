---
title: "Intro to R"
subtitle: |
   | R Coding Club 
   | RTG 2660
author: "Dr. Lea Hildebrandt"
date: 2024/01/16
description: "Getting started with R and RStudio"
image: "img/W1_cover.jpg"
format: 
  revealjs:
    smaller: true
    scrollable: true
    slide-number: true
    theme: simple
    chalkboard: true
editor: visual
from: markdown+emoji
---

# R!

```{css}
code.sourceCode {
  font-size: 1.4em;
}

div.cell-output-stdout {
  font-size: 1.4em;
}
```
. . .
You can find the slides on our **course website**: 
https://hillea.github.io/rclubwue/slides.html! 
Handy to follow along and to possibly copy code. 

::: notes
Who has experience with coding and/or R?

but don't cheat and look at solutions in slides!
:::

## Why write code?

::: {.incremental .smaller}
-   Doing statistical calculation by hand? Tedious & error prone! Computer is faster...

-   Using spreadsheets? Limited options, change data accidentally...

-   Using point-and-click software (e.g. SPSS)?

    -   proprietary software = expensive

    -   R = open, extensible (community)

    -   reproducible!

-   You'll learn to program!
:::

::: notes
Chat: What are advantages (or disadvantages!) of coding?
:::

## Install R & RStudio

You should all have installed both by now! Who had problems doing so?

## Overview RStudio

![RStudio Interface](images/rstudio.png){fig-alt="Screenshot of the RStudio Interface with different panes visible"}

::: notes
open RStudio!
:::

## RStudio Panes

::: columns
::: {.column .smaller width="40%"}
1.  Script pane/window -\> to save your code

2.  Console -\> here the commands are run

3.  Environment -\> which variables/dataframes are saved

4.  Files, plots, help etc. -\> files shows you the files in the folder you're currently in
:::

::: {.column width="10%"}
:::

::: {.column width="50%"}
![RStudio Interface](images/rstudio2.png)
:::
:::

::: notes
Console vs. Script (Rmarkdown later)
:::

## Using the Console as a Calculator

```{r}
#| echo: true

100 + 1

2*3

sqrt(9)
```

![Console used as calculator](images/Console.jpg){fig-alt="Calculated 100+1, 2*3, square root of 9 directly in the console"}

::: notes
try it out!

We can't really do much with these values, they will just be written in the console.
:::

## Saving the Results as a Variable/Object

```{r}
#| echo: true

a <- 100 + 1

multi <- 2*3

SqrtOfNine <- sqrt(9)

word <- "Hello"
```

::: {.incremental .smaller}
-   "\<-" is used to assign values to variables ("=" is also possible but not preferred)

-   `a`, `multi` etc. are the variable names, which can be words, no whitespace allowed

    -   You can find those now in your Environment!

-   as you can see, the variables can contain different types: Numbers, strings/characters (= words) etc.

-   no output in console!

-   the variables contain the calculated value (i.e. 101) and not the calculation/formula (100+1)

-   You can use those variables for further calculations, e.g. `a + multi`
:::

::: notes
Type first command in console, what happens?

Why don't we see anything in the console?\
What happens if we type in `a` in the console?

Is there anything else that you find interesting?

What is sqrt()?
:::

## Working Directory

::: incremental
It makes sense to save all your scripts etc. in a folder specifically dedicated to this course.

-   Make sure that R knows that you want to work in this folder, i.e. set your working directory:

    -   **Session -\> Set Working Directory -\> Choose Directory**

-   **Assignment**: Please make a folder, e.g. called "R_Club" (but not "R" or anything with spaces in it). Then set your working directory to this folder.
:::

## Scripts

If you type in all your commands/code in the console, it might get lost/you might not remember what you did, and you always have to type it in again if you want to run it again with slight changes. Also, the code in the console is not save-able.

Therefore, it is better practice to write scripts. Scripts are basically text files that contain your code.

. . .

To open a new script, click **File -\> New File -\> R Script.**

To run a line of the script, you can either click Run at the top right of the pane or press `ctrl + enter`. It will always run the line where the cursor is located (or the lines that you have selected with the mouse). To run the whole script, press `ctrl + shift + enter`.

## Scripts 2

**Assignment**: Open a new file. In this file, write down some of the code (one command per line) that we have used so far and save the file.

Now run the code (either by pressing "run" at the top right of the script or `ctrl + enter`).

## Functions

You might have noticed `sqrt(9)` earlier. `sqrt()` is an R function that calculates the square root of a number. `9` is the *argument* that we hand over to the function.

If you want to know what a function does, which arguments it takes, or which output it generates, you can type `?functionname()` in the console, e.g.

```{r}
#| echo: true
#| eval: false
?sqrt()
```

This will open the help file in the Help Pane on the lower right of RStudio.

::: notes
Do this now! Anything unclear?
:::

## Functions 2

Functions often take more than one argument:

```{r}
#| echo: true
#| eval: false
rnorm(n = 6, mean = 3, sd = 1)
# rnorm(6, 3, 1)

# By the way, # denotes a comment (ignored by R), which can be helpful for scripting!
```

You can explicitly state which argument you are handing over (check the help file for the argument names!) or just state the values (but these have to be in the correct order then! See help file).

## Packages

There are a number of functions that are already included with Base R, but you can greatly extend the power of R by loading packages. Packages are like libraries of functions that someone else wrote.

You can load a package using the `install.packages()` function:

```{r}
#| echo: true
#| eval: false
install.packages("tidyverse")
```

(It may be necessary to install Rtools: https://cran.r-project.org/bin/windows/Rtools/)

But installing is not enough to be able to actually use the functions from that package. You'd also need to load the package with the `libary()` function:

```{r}
#| echo: true
#| eval: false
library("tidyverse") # or library(tidyverse)
```

**Assignment**: Install and load the tidyverse package (which we will use a lot in this course).

::: notes
Open Source! Anyone can write a package!

Base R = mobile phone, comes with some functions, packages = apps

possibly necessary to install Rtools!
:::

# Working with Data

## Read in Data

To read in data files, you need to know which format these files have, e.g. .txt. or .csv files or some other (proprietary) format. There are packages that enable you to read in data of different formats.

We will use the files from [Fundamentals of Quantitative Analysis](https://psyteachr.github.io/quant-fun-v2/starting-with-data.html). Save these in your course folder on your computer (do not open them!). Set your working directory to the course folder.

. . .

Delete the text/code in the .Rmd document you just worked on (or add a new header like "Working with data"). Underneath, add a code chunk with the following content:

```{r}
#| echo: true
#| eval: false

# library(tidyverse) # we will use a function from the tidyverse to read in the data

dat <- read_csv("ahi-cesd.csv")
pinfo <- read_csv("participant-info.csv")
```

Run the code chunk!

## Looking at the Data

::: incremental
There are several options to get a glimpse at the data:

-   Click on the object/variable name in your Environment.

-   Type `View(NameOfObject)` in your console, e.g. `View(dat).`

-   In the console, type in `str(dat)` or `str(pinfo)` to get an overview of the data.

-   In the console, type in `summary(dat).`

-   In the console, type in `head(dat).`

-   What is the difference between these commands?
:::

## Looking at the Data 2

What is the difference to the objects/variables, that you assigned/saved in your Environment earlier and these objects?

. . .

The two objects we just read in are data frames, which consists of full datasets. The objects we assigned earlier were simpler variables, which only consisted of single values/words.

Data frames usually have several rows and columns. Remember, the columns are the variables and the rows are the observations.

# Other Script/Project Options

-   **R Markdown**

-   *Quarto*

-   *Projects*

## R Markdown

R scripts are a good way to save your code. However, you'd better heavily comment in your scripts, so that future you (and potentially collaborators) know what happens in your script.

An alternative is an **R Markdown file**. This is also a sort of script, but you can write text (like in a word processor) and mix it with code chunks, where you can write your R code. R Markdown is the "language" you use to write in these files, which is a variety of Markdown.

The advantage of R Markdown files (ending with .Rmd) is that they increase reproducibility. For example, you can write whole reports in R Markdown (and also these slides are made with it!).

A newer variant is called *quarto*, which works very similar (but is more flexible) to R Markdown.

## R Markdown 2

![R script](images/Rscript.jpg){alt="R script"}

![R Markdown](images/Rmd.jpg){alt="R Markdown"}

![R Markdown rendered as html report](images/rmdrendered.jpg){alt="R Markdown rendered as html report" width="400"}

## R Markdown 3

::: incremental
**Assignment**:

-   Open a new .Rmd file, change/insert the title and author.

-   Check out the content of it.

-   Delete and add some of the text on the white background. Change the Header (indicated by ##) to "About me" and write something about yourself underneath.

-   Switch between "Source" and "Visual" in the top left. What changes? What is "Visual"?

-   In the grey boxes ("code chunks"), add some code. Try to find out how you can add a new code chunk.

-   Save the file with a sensible name.

-   What happens when you click on "Knit" (top of Script pane)?
:::

-   hint: The green C with the + on the top right will do so (or using "insert" in the visual view)
-   Click on the little arrow next to knit and select "Knit to PDF"
-   insert inline code

## R Markdown 4

There are many useful things you can so with R Markdown: Adding different headers, adding inline code, knitting as a PDF, adding pictures or tables...You can also decide whether the code chunks should be visible in the output etc.

For further information, check out the R Markdown cheatsheet: <https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf>

## Thanks!

That's the lesson on "Getting started with R"!

Next week, we'll talk about models & probability and learn how to wrangle (= preprocess) data in R!
