---
title: "Randomization and Counterbalancing"
subtitle: |
   | R Coding Club 
   | RTG 2660
author: "Dr. Lea Hildebrandt"
date: 2024/01/30
description: "Using R for e.g. your study design"
format: 
  revealjs:
    smaller: true
    scrollable: true
    slide-number: true
    theme: simple
    chalkboard: true
editor: visual
from: markdown+emoji
---

# Randomization vs. Counterbalancing

*Randomization/random assignment*: Determining completely at random (or pseudorandom) e.g. which condition a participant belongs to/which stimulus is shown... (Block randomization = all conditions occur once before being repeated.)

*Counterbalancing*: Determining how many conditions etc. there are and making sure that all orders are seen by the same number of participants. (This term is often used for within-subjects designs!)

::: notes
Problem Random: unequal sample sizes (not a problem for LMMs, but should be roughly equal to have good power)

Counterbalanced Randomization: Make list and randomly assign participants to which list to use.
:::

## Let's dive in with an example

We have three conditions (between-subject) and we want to randomly assign each participant to a condition.

. . .

We would use a function called `sample()`, which will be our best friend for today:\
It allows us to draw from a vector (think of drawing a paper slip from a hat), either with or without replacement.

```{r}
#| echo: true

# just shuffle
conds <- sample(c("condition A", "condition B", "condition C"))
conds

# draw them repeatedly (with equal probability)
conds2 <- sample(c("condition A", "condition B", "condition C"), 30, replace = TRUE)
conds2
table(conds2)

```

. . .

The latter would be \~ random assignment. If we want equal group sizes, we could use a vector of length = sample size and shuffle it (sample without replacement):

```{r}
#| echo: true
#| 
conds <- sample(rep(c("condition A", "condition B", "condition C"), times=10))
conds
table(conds)
```

Add to dataframe:

```{r}
#| echo: true

library(tidyverse)

design <- tibble(
  ID = 1:30,
  cond = sample(rep(c("condition A", "condition B", "condition C"), times=10))
)

```

## Two conditions

We can draw them separately:

```{r}
#| echo: true


treatment <- c("Treatment", "Control")
color <- c("blue", "yellow")

design <- tibble(
  ID = 1:30,
  cond = sample(rep(treatment, times=15)),
  color = sample(rep(color, times=15))
)

table(design$cond, design$color) 

# make sure each combination is equally often represented:
design <- crossing(treatment, color) %>% # gets all combinations
  mutate(combi=str_c(treatment, color, sep="_")) %>%  # combine columns
  select(-treatment, -color) %>%   # remove original ones
  reframe(combi2 = sample(rep(combi, 10))) %>%  # use reframe to add rows
  mutate(ID = 1:n()) %>%  # add participant number
  separate_wider_delim(combi2, delim="_", names=c("treatment", "color"))

table(design$treatment, design$color)
```

## What do we need for randomization?

Probability theory! Or, at least
