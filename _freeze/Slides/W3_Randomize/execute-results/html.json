{
  "hash": "36db3b7b804f8260616d94a981ffcb28",
  "result": {
    "markdown": "---\ntitle: \"Randomization and Counterbalancing\"\nsubtitle: |\n   | R Coding Club \n   | RTG 2660\nauthor: \"Dr. Lea Hildebrandt\"\ndate: 2024/01/30\ndescription: \"Using R for e.g. your study design\"\nformat: \n  revealjs:\n    smaller: true\n    scrollable: true\n    slide-number: true\n    theme: simple\n    chalkboard: true\neditor: visual\nfrom: markdown+emoji\n---\n\n\n# Randomization vs. Counterbalancing\n\n*Randomization/random assignment*: Determining completely at random (or pseudorandom) e.g. which condition a participant belongs to/which stimulus is shown... (Block randomization = all conditions occur once before being repeated.)\n\n*Counterbalancing*: Determining how many conditions etc. there are and making sure that all orders are seen by the same number of participants. (This term is often used for within-subjects designs!)\n\n::: notes\nProblem Random: unequal sample sizes (not a problem for LMMs, but should be roughly equal to have good power)\n\nCounterbalanced Randomization: Make list and randomly assign participants to which list to use.\n:::\n\n## Let's dive in with an example\n\nWe have three conditions (between-subject) and we want to randomly assign each participant to a condition.\n\n. . .\n\nWe would use a function called `sample()`, which will be our best friend for today:\\\nIt allows us to draw from a vector (think of drawing a paper slip from a hat), either with or without replacement.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# just shuffle\nconds <- sample(c(\"condition A\", \"condition B\", \"condition C\"))\nconds\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"condition C\" \"condition B\" \"condition A\"\n```\n:::\n\n```{.r .cell-code}\n# draw them repeatedly (with equal probability)\nconds2 <- sample(c(\"condition A\", \"condition B\", \"condition C\"), 30, replace = TRUE)\nconds2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"condition A\" \"condition C\" \"condition C\" \"condition C\" \"condition C\"\n [6] \"condition A\" \"condition C\" \"condition C\" \"condition B\" \"condition A\"\n[11] \"condition A\" \"condition C\" \"condition B\" \"condition A\" \"condition B\"\n[16] \"condition C\" \"condition A\" \"condition A\" \"condition C\" \"condition C\"\n[21] \"condition B\" \"condition A\" \"condition C\" \"condition C\" \"condition A\"\n[26] \"condition B\" \"condition A\" \"condition A\" \"condition B\" \"condition A\"\n```\n:::\n\n```{.r .cell-code}\ntable(conds2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nconds2\ncondition A condition B condition C \n         12           6          12 \n```\n:::\n:::\n\n\n. . .\n\nThe latter would be \\~ random assignment. If we want equal group sizes, we could use a vector of length = sample size and shuffle it (sample without replacement):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconds <- sample(rep(c(\"condition A\", \"condition B\", \"condition C\"), times=10))\nconds\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"condition A\" \"condition C\" \"condition C\" \"condition A\" \"condition C\"\n [6] \"condition A\" \"condition C\" \"condition B\" \"condition A\" \"condition B\"\n[11] \"condition B\" \"condition B\" \"condition C\" \"condition B\" \"condition B\"\n[16] \"condition B\" \"condition C\" \"condition C\" \"condition C\" \"condition A\"\n[21] \"condition C\" \"condition A\" \"condition A\" \"condition B\" \"condition C\"\n[26] \"condition B\" \"condition A\" \"condition A\" \"condition B\" \"condition A\"\n```\n:::\n\n```{.r .cell-code}\ntable(conds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nconds\ncondition A condition B condition C \n         10          10          10 \n```\n:::\n:::\n\n\n## What do we need for randomization?\n\nProbability theory! Or, at least\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}