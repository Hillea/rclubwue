{
  "hash": "e53147e9ef72fbaea6d08d0038031305",
  "result": {
    "markdown": "---\ntitle: \"Intro to R\"\nsubtitle: |\n   | R Coding Club \n   | RTG 2660\nauthor: \"Dr. Lea Hildebrandt\"\ndate: 2024/01/16\ndescription: \"Getting started with R and RStudio\"\nimage: \"img/W1_cover.jpg\"\nformat: \n  revealjs:\n    smaller: true\n    scrollable: true\n    slide-number: true\n    theme: simple\n    embed-resources: true\neditor: visual\nfrom: markdown+emoji\n---\n\n\n# R Coding Club?!?\n\n\n::: {.cell}\n<style type=\"text/css\">\ncode.sourceCode {\n  font-size: 1.4em;\n}\n\ndiv.cell-output-stdout {\n  font-size: 1.4em;\n}\n</style>\n:::\n\n\nWhat is a *coding club*?\n\n. . .\n\n> \"Coding Club is for everyone, regardless of their career stage or current level of knowledge. Coding Club is a place that brings people together, regardless of their gender or background. We all have the right to learn, and we believe learning is more fun and efficient when we help each other along the way.\" (<https://ourcodingclub.github.io/>)\n\n. . .\n\n-   Code Review: Someone brings a script, we go through it and learn from it/improve it.\n\n    -   Coding \"solutions\": Someone presents something neat they implemented with code.\n\n-   Coding \"problems\": Someone brings a problem and we try to solve it together.\n\n-   Data Dojo: We take a dataset (from one of us or an openly available one, e.g. tidy tuesday) and work with it collaboratively. After deciding what to do with it, two people start: One is the driver (who live codes) and one the co-pilot (who helps and instructs). After 5 min. the co-pilot switches to driver and a new co-pilot steps up.\n\n::: notes\nIt would be great if everyone contributes!\n\n\\\n. . You can find the slides on our **course website**: https://hillea.github.io/rclubwue/slides.html! Handy to follow along and to possibly copy code.\n\nWho has experience with coding and/or R?\n\nbut don't cheat and look at solutions in slides!\n:::\n\n## Schedule (preliminary)\n\nHow often do we want to meet? (Beginning weekly, maybe later bi-weekly?)\n\nSemester break?\n\n| Session | Date     | Topic                            | Preparation/Notes                                                               |\n|---------|----------|----------------------------------|---------------------------------------------------------------------------------|\n| 1       | 16.01.24 | Intro to R & RStudio             | [Install R and RStudio](https://rstudio-education.github.io/hopr/starting.html) |\n| 2       | 23.01.24 | Data Wrangling                   |                                                                                 |\n| 3       | 30.01.24 | Randomization & Counterbalancing | (Ecem)                                                                          |\n| 4       | 06.02.24 | Data Visualization               |                                                                                 |\n| 5       | 13.02.24 | (Semester break or continue?)    |                                                                                 |\n| 6       | 20.02.24 | Preprocessing, e.g. physio data  |                                                                                 |\n\n## Why write code?\n\n::: {.incremental .smaller}\n-   Doing statistical calculation by hand? Tedious & error prone! Computer is faster...\n\n-   Using spreadsheets? Limited options, change data accidentally...\n\n-   Using point-and-click software (e.g. SPSS)?\n\n    -   proprietary software = expensive\n\n    -   R = open, extensible (community)\n\n    -   reproducible!\n\n-   You'll learn to program!\n:::\n\n::: notes\nChat: What are advantages (or disadvantages!) of coding?\n:::\n\n## Install R & RStudio\n\nYou should all have installed both by now! Who had problems doing so?\n\n## Overview RStudio\n\n![RStudio Interface](images/rstudio.png){fig-alt=\"Screenshot of the RStudio Interface with different panes visible\"}\n\n::: notes\nopen RStudio!\n:::\n\n## RStudio Panes\n\n::: columns\n::: {.column .smaller width=\"40%\"}\n1.  Script pane/window -\\> to save your code\n\n2.  Console -\\> here the commands are run\n\n3.  Environment -\\> which variables/dataframes are saved\n\n4.  Files, plots, help etc. -\\> files shows you the files in the folder you're currently in\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"50%\"}\n![RStudio Interface](images/rstudio2.png)\n:::\n:::\n\n::: notes\nConsole vs. Script (Rmarkdown later)\n:::\n\n## Using the Console as a Calculator\n\n\n::: {.cell}\n\n```{.r .cell-code}\n100 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 101\n```\n:::\n\n```{.r .cell-code}\n2*3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\nsqrt(9)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n![Console used as calculator](images/Console.jpg){fig-alt=\"Calculated 100+1, 2*3, square root of 9 directly in the console\"}\n\n::: notes\ntry it out!\n\nWe can't really do much with these values, they will just be written in the console.\n:::\n\n## Saving the Results as a Variable/Object\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 100 + 1\n\nmulti <- 2*3\n\nSqrtOfNine <- sqrt(9)\n\nword <- \"Hello\"\n```\n:::\n\n\n::: {.incremental .smaller}\n-   \"\\<-\" is used to assign values to variables (\"=\" is also possible but not preferred)\n\n-   `a`, `multi` etc. are the variable names, which can be words, no whitespace allowed\n\n    -   You can find those now in your Environment!\n\n-   as you can see, the variables can contain different types: Numbers, strings/characters (= words) etc.\n\n-   no output in console!\n\n-   the variables contain the calculated value (i.e. 101) and not the calculation/formula (100+1)\n\n-   You can use those variables for further calculations, e.g. `a + multi`\n:::\n\n::: notes\nType first command in console, what happens?\n\nWhy don't we see anything in the console?\\\nWhat happens if we type in `a` in the console?\n\nIs there anything else that you find interesting?\n\nWhat is sqrt()?\n:::\n\n## Working Directory\n\n::: incremental\nIt makes sense to save all your scripts etc. in a folder specifically dedicated to this course.\n\n-   Make sure that R knows that you want to work in this folder, i.e. set your working directory:\n\n    -   **Session -\\> Set Working Directory -\\> Choose Directory**\n\n-   **Assignment**: Please make a folder, e.g. called \"R_Club\" (but not \"R\" or anything with spaces in it). Then set your working directory to this folder.\n:::\n\n## Scripts\n\nIf you type in all your commands/code in the console, it might get lost/you might not remember what you did, and you always have to type it in again if you want to run it again with slight changes. Also, the code in the console is not save-able.\n\nTherefore, it is better practice to write scripts. Scripts are basically text files that contain your code.\n\n. . .\n\nTo open a new script, click **File -\\> New File -\\> R Script.**\n\nTo run a line of the script, you can either click Run at the top right of the pane or press `ctrl + enter`. It will always run the line where the cursor is located (or the lines that you have selected with the mouse). To run the whole script, press `ctrl + shift + enter`.\n\n## Scripts 2\n\n**Assignment**: Open a new file. In this file, write down some of the code (one command per line) that we have used so far and save the file.\n\nNow run the code (either by pressing \"run\" at the top right of the script or `ctrl + enter`).\n\n## Functions\n\nYou might have noticed `sqrt(9)` earlier. `sqrt()` is an R function that calculates the square root of a number. `9` is the *argument* that we hand over to the function.\n\nIf you want to know what a function does, which arguments it takes, or which output it generates, you can type `?functionname()` in the console, e.g.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?sqrt()\n```\n:::\n\n\nThis will open the help file in the Help Pane on the lower right of RStudio.\n\n::: notes\nDo this now! Anything unclear?\n:::\n\n## Functions 2\n\nFunctions often take more than one argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrnorm(n = 6, mean = 3, sd = 1)\n# rnorm(6, 3, 1)\n\n# By the way, # denotes a comment (ignored by R), which can be helpful for scripting!\n```\n:::\n\n\nYou can explicitly state which argument you are handing over (check the help file for the argument names!) or just state the values (but these have to be in the correct order then! See help file).\n\n## Packages\n\nThere are a number of functions that are already included with Base R, but you can greatly extend the power of R by loading packages. Packages are like libraries of functions that someone else wrote.\n\nYou can load a package using the `install.packages()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\n(It may be necessary to install Rtools: https://cran.r-project.org/bin/windows/Rtools/)\n\nBut installing is not enough to be able to actually use the functions from that package. You'd also need to load the package with the `libary()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"tidyverse\") # or library(tidyverse)\n```\n:::\n\n\n**Assignment**: Install and load the tidyverse package (which we will use a lot in this course).\n\n::: notes\nOpen Source! Anyone can write a package!\n\nBase R = mobile phone, comes with some functions, packages = apps\n\npossibly necessary to install Rtools!\n:::\n\n# Working with Data\n\n## Read in Data\n\nTo read in data files, you need to know which format these files have, e.g. .txt. or .csv files or some other (proprietary) format. There are packages that enable you to read in data of different formats.\n\nWe will use the files from [Fundamentals of Quantitative Analysis](https://psyteachr.github.io/quant-fun-v2/starting-with-data.html). Save these in your course folder on your computer (do not open them!). Set your working directory to the course folder.\n\n. . .\n\nDelete the text/code in the .Rmd document you just worked on (or add a new header like \"Working with data\"). Underneath, add a code chunk with the following content:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# library(tidyverse) # we will use a function from the tidyverse to read in the data\n\ndat <- read_csv(\"ahi-cesd.csv\")\npinfo <- read_csv(\"participant-info.csv\")\n```\n:::\n\n\nRun the code chunk!\n\n## Looking at the Data\n\n::: incremental\nThere are several options to get a glimpse at the data:\n\n-   Click on the object/variable name in your Environment.\n\n-   Type `View(NameOfObject)` in your console, e.g. `View(dat).`\n\n-   In the console, type in `str(dat)` or `str(pinfo)` to get an overview of the data.\n\n-   In the console, type in `summary(dat).`\n\n-   In the console, type in `head(dat).`\n\n-   What is the difference between these commands?\n:::\n\n## Looking at the Data 2\n\nWhat is the difference to the objects/variables, that you assigned/saved in your Environment earlier and these objects?\n\n. . .\n\nThe two objects we just read in are data frames, which consists of full datasets. The objects we assigned earlier were simpler variables, which only consisted of single values/words.\n\nData frames usually have several rows and columns. Remember, the columns are the variables and the rows are the observations.\n\n# Other Script/Project Options\n\n-   **R Markdown**\n\n-   *Quarto*\n\n-   *Projects*\n\n## R Markdown\n\nR scripts are a good way to save your code. However, you'd better heavily comment in your scripts, so that future you (and potentially collaborators) know what happens in your script.\n\nAn alternative is an **R Markdown file**. This is also a sort of script, but you can write text (like in a word processor) and mix it with code chunks, where you can write your R code. R Markdown is the \"language\" you use to write in these files, which is a variety of Markdown.\n\nThe advantage of R Markdown files (ending with .Rmd) is that they increase reproducibility. For example, you can write whole reports in R Markdown (and also these slides are made with it!).\n\nA newer variant is called *quarto*, which works very similar (but is more flexible) to R Markdown.\n\n## R Markdown 2\n\n![R script](images/Rscript.jpg)\n\n![R Markdown](images/Rmd.jpg)\n\n![R Markdown rendered as html report](images/rmdrendered.jpg){width=\"400\"}\n\n## R Markdown 3\n\n::: incremental\n**Assignment**:\n\n-   Open a new .Rmd file, change/insert the title and author.\n\n-   Check out the content of it.\n\n-   Delete and add some of the text on the white background. Change the Header (indicated by ##) to \"About me\" and write something about yourself underneath.\n\n-   Switch between \"Source\" and \"Visual\" in the top left. What changes? What is \"Visual\"?\n\n-   In the grey boxes (\"code chunks\"), add some code. Try to find out how you can add a new code chunk.\n\n    -   hint: The green C with the + on the top right will do so (or using \"insert\" in the visual view)\n\n-   Save the file with a sensible name.\n\n-   What happens when you click on \"Knit\" (top of Script pane)?\n\n    -   Click on the little arrow next to knit and select \"Knit to PDF\"\n\n-   insert inline code\n:::\n\n## R Markdown 4\n\nThere are many useful things you can so with R Markdown: Adding different headers, adding inline code, knitting as a PDF, adding pictures or tables...You can also decide whether the code chunks should be visible in the output etc.\n\nFor further information, check out the R Markdown cheatsheet: <https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf>\n\n## Thanks!\n\nThat's the lesson on \"Getting started with R\"!\n\nNext week, we'll talk about models & probability and learn how to wrangle (= preprocess) data in R!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}